/* libendf-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "Endf", lower_case_cprefix = "endf_")]
namespace Endf {
	[CCode (ref_function = "endf_interpolation_ref", unref_function = "endf_interpolation_unref", param_spec_function = "endf_param_spec_interpolation", cheader_filename = "libendf-1.0.h")]
	public class Interpolation : Endf.Acceptor {
		public bool accept_card (Endf.Card card);
		public double eval (double x, double[] xs, double[] ys) throws Endf.Error;
		public static double eval_static (Endf.INTType type, double x, double x0, double x1, double y0, double y1);
		public double eval_with_index (double x, int xi, double[] xs, double[] ys);
		public Interpolation (int NR);
		public void set_range (int id, int range_end, Endf.INTType type);
	}
	[CCode (ref_function = "endf_list_ref", unref_function = "endf_list_unref", param_spec_function = "endf_param_spec_list", cheader_filename = "libendf-1.0.h")]
	public class LIST : Endf.Acceptor {
		public int NP;
		public double[] Y;
		public LIST ();
	}
	[CCode (ref_function = "endf_loader_ref", unref_function = "endf_loader_unref", param_spec_function = "endf_param_spec_loader", cheader_filename = "libendf-1.0.h")]
	public class Loader {
		public void add_file (string filename) throws GLib.Error;
		public void add_string (string str) throws Endf.Error;
		public Endf.Section? lookup (Endf.MATType MAT, Endf.MFType MF, Endf.MTType MT);
		public Loader ();
	}
	[CCode (cheader_filename = "libendf-1.0.h")]
	public class MF7MT2 : Endf.Section, Endf.Elastic {
		[CCode (type_id = "ENDF_MF7_MT2_TYPE_COH_DATA_TYPE", cheader_filename = "libendf-1.0.h")]
		public struct COHDataType {
			public int NR;
			public int NP;
			public int LT;
			public double[] E;
			public Endf.MF7MT2.TPage[] Tpages;
			public double[] T;
			public Endf.Interpolation INT;
		}
		[CCode (type_id = "ENDF_MF7_MT2_TYPE_HEAD", cheader_filename = "libendf-1.0.h")]
		public struct HEAD {
			public double ZA;
			public double AWR;
			public int LTHR;
		}
		[CCode (type_id = "ENDF_MF7_MT2_TYPE_INC_DATA_TYPE", cheader_filename = "libendf-1.0.h")]
		public struct INCDataType {
			public double SB;
			public int NR;
			public int NP;
			public double[] T;
			public double[] W;
			public Endf.Interpolation INT;
		}
		[CCode (type_id = "ENDF_MF7_MT2_TYPE_TPAGE", cheader_filename = "libendf-1.0.h")]
		public struct TPage {
			public double[] S;
			public Endf.INTType LI;
		}
		public Endf.MF7MT2.COHDataType COH;
		public Endf.MF7MT2.INCDataType INC;
		public Endf.MF7MT2.HEAD head;
		public override double S () throws Endf.Error;
		public override void accept (Endf.Parser parser) throws Endf.Error;
		public MF7MT2 ();
		protected void prepare_page_range () throws Endf.Error;
		protected void prepare_rdist () throws Endf.Error;
		public override string to_string (GLib.StringBuilder? sb = null);
		public override double E { get; set; }
		public override double T { get; set; }
	}
	[CCode (cheader_filename = "libendf-1.0.h")]
	public class MF7MT4 : Endf.Section {
		[CCode (type_id = "ENDF_MF7_MT4_TYPE_DATA", cheader_filename = "libendf-1.0.h")]
		public struct DATA {
			public int LLN;
			public int NI;
			public int NS;
			public int Nb;
			public double[] B;
			public double[] b;
			public double[] a;
			public int LT;
			public double[] T;
		}
		[CCode (type_id = "ENDF_MF7_MT4_TYPE_EFF_PAGE", cheader_filename = "libendf-1.0.h")]
		public struct EffPage {
			public double[] Tint;
			public double[] Teff;
			public Endf.Interpolation INT;
		}
		[CCode (type_id = "ENDF_MF7_MT4_TYPE_HEAD", cheader_filename = "libendf-1.0.h")]
		public struct HEAD {
			public double ZA;
			public double AWR;
			public int LAT;
			public int LASYM;
		}
		[CCode (type_id = "ENDF_MF7_MT4_TYPE_TPAGE", cheader_filename = "libendf-1.0.h")]
		public struct TPage {
			public double[] S;
			public Endf.INTType LI;
		}
		[CCode (type_id = "ENDF_MF7_MT4_TYPE_BPAGE", cheader_filename = "libendf-1.0.h")]
		public struct bPage {
			public Endf.MF7MT4.TPage[] Tpages;
		}
		public Endf.Interpolation aINT;
		public Endf.Interpolation bINT;
		public Endf.MF7MT4.DATA data;
		public Endf.MF7MT4.HEAD head;
		public const int LASYM_ASYMMETRIC;
		public const int LASYM_SYMMETRIC;
		public const int LAT_ACTURAL;
		public const int LAT_FAKE;
		public const int LLN_DIRECT;
		public const int LLN_LOG;
		public override double S ();
		public override void accept (Endf.Parser parser) throws Endf.Error;
		public double dS (double Eout, double mu) throws Endf.Error;
		public MF7MT4 ();
		public override string to_string (GLib.StringBuilder? sb = null);
		public override double E { get; set; }
		public override double T { get; set; }
	}
	[CCode (ref_function = "endf_parser_ref", unref_function = "endf_parser_unref", param_spec_function = "endf_param_spec_parser", cheader_filename = "libendf-1.0.h")]
	public class Parser {
		[CCode (cheader_filename = "libendf-1.0.h")]
		public delegate void CardFunction (Endf.Parser parser);
		public Endf.Card card;
		public Endf.Parser.CardFunction card_function;
		public void add_file (string filename) throws GLib.Error;
		public void add_string (string str);
		public bool fetch_card ();
		public Parser ();
	}
	[CCode (ref_function = "endf_section_ref", unref_function = "endf_section_unref", param_spec_function = "endf_param_spec_section", cheader_filename = "libendf-1.0.h")]
	public abstract class Section : Endf.Acceptor {
		[CCode (type_id = "ENDF_SECTION_TYPE_META", cheader_filename = "libendf-1.0.h")]
		public struct META {
			public Endf.MATType MAT;
			public Endf.MFType MF;
			public Endf.MTType MT;
			public static bool equal (ref Endf.Section.META h1, ref Endf.Section.META h2);
			public static uint hash (ref Endf.Section.META h);
			public uint to_uint ();
		}
		public Endf.Section.META meta;
		public abstract double S () throws Endf.Error;
		public abstract void accept (Endf.Parser parser) throws Endf.Error;
		protected static void array_to_string (GLib.StringBuilder sb, double[] array, string name);
		public abstract string to_string (GLib.StringBuilder? builder = null);
		public abstract double E { get; set; }
		public abstract double T { get; set; }
	}
	[CCode (ref_function = "endf_tab_ref", unref_function = "endf_tab_unref", param_spec_function = "endf_param_spec_tab", cheader_filename = "libendf-1.0.h")]
	public class TAB : Endf.Acceptor {
		public Endf.Interpolation INT;
		public int NP;
		public int NR;
		public double[] X;
		public double[] Y;
		public TAB ();
	}
	[CCode (cheader_filename = "libendf-1.0.h")]
	public interface Acceptor {
		public abstract void accept (Endf.Parser parser) throws Endf.Error;
	}
	[CCode (cheader_filename = "libendf-1.0.h")]
	public interface Elastic : Endf.Section {
		public abstract void random_event (Gsl.RNG rng, out double mu) throws Endf.Error;
	}
	[CCode (cheader_filename = "libendf-1.0.h")]
	public interface Inelastic : Endf.Section {
		public abstract double random_event (Gsl.RNG rng, out double dE, out double mu) throws Endf.Error;
	}
	[CCode (type_id = "ENDF_TYPE_CARD", cheader_filename = "libendf-1.0.h")]
	public struct Card {
		[CCode (array_length = false)]
		public double[] numbers;
		public weak string start;
		public weak string end;
		public Endf.Section.META meta;
		public int line;
		public string to_string ();
	}
	[CCode (cprefix = "ENDF_INT_TYPE_", cheader_filename = "libendf-1.0.h")]
	public enum INTType {
		HISTOGRAM,
		LINEAR_LINEAR,
		LINEAR_LOG,
		LOG_LINEAR,
		LOG_LOG,
		GAMOW
	}
	[CCode (cprefix = "ENDF_MAT_TYPE_", cheader_filename = "libendf-1.0.h")]
	public enum MATType {
		TAPE_END,
		MAT_END,
		H_1_1
	}
	[CCode (cprefix = "ENDF_MF_TYPE_", cheader_filename = "libendf-1.0.h")]
	public enum MFType {
		FILE_END,
		DESC_AND_MISC,
		RESONANCE_PARA,
		REACTION_CS_ENERGY,
		ANGULAR_DIST,
		ENERGY_DIST,
		ENERGY_ANGLE_DIST,
		THERMAL_SCATTERING,
		RADIOACTIVITY,
		NUCLIDE_PROD_9,
		NUCLIDE_PROD_10,
		UNKNOWN_11,
		PHOTON_PROD_12,
		PHOTON_PROD_13,
		PHOTON_PROD_14,
		PHOTON_PROD_15,
		COVARIANCE_30,
		COVARIANCE_31,
		COVARIANCE_32,
		COVARIANCE_33,
		COVARIANCE_34,
		COVARIANCE_35,
		COVARIANCE_36
	}
	[CCode (cprefix = "ENDF_MT_TYPE_", cheader_filename = "libendf-1.0.h")]
	public enum MTType {
		SECTION_END,
		TOTAL_CS,
		ELASTIC,
		REACTION_Z_N,
		REACTION_Z_2N,
		FISSION,
		RADIATIVE_CAP
	}
	[CCode (cprefix = "ENDF_ERROR_", cheader_filename = "libendf-1.0.h")]
	public errordomain Error {
		OVERFLOWN,
		MALFORMED,
	}
	[CCode (cheader_filename = "libendf-1.0.h")]
	public static string enum_to_string (GLib.Type type, int d);
	[CCode (cheader_filename = "libendf-1.0.h")]
	protected static int search_double (double foo, double[] array) throws Endf.Error;
}
