/* valartl.vapi generated by valac, do not modify. */

[CCode (cprefix = "Vala", lower_case_cprefix = "vala_")]
namespace Vala {
	[CCode (cprefix = "ValaRuntime", lower_case_cprefix = "vala_runtime_")]
	namespace Runtime {
		[CCode (cprefix = "ValaRuntimeYAML", lower_case_cprefix = "vala_runtime_yaml_")]
		namespace YAML {
			[CCode (ref_function = "vala_runtime_yaml_context_ref", unref_function = "vala_runtime_yaml_context_unref", param_spec_function = "vala_runtime_yaml_param_spec_context", cheader_filename = "valartl.h")]
			public class Context {
				public GLib.List<Vala.Runtime.YAML.Node> documents;
				public Context (Vala.Runtime.YAML.Parser parser);
				public void parse (string s) throws GLib.Error;
			}
			[CCode (ref_function = "vala_runtime_yaml_node_ref", unref_function = "vala_runtime_yaml_node_unref", param_spec_function = "vala_runtime_yaml_param_spec_node", cheader_filename = "valartl.h")]
			public class Node {
				public string alias;
				public string anchor;
				public int ind;
				public bool is_map;
				public bool is_scalar;
				public bool is_seq;
				public string key;
				public GLib.HashTable<weak string,Vala.Runtime.YAML.Node> mapping;
				public GLib.List<weak Vala.Runtime.YAML.Node> mapping_list;
				public weak Vala.Runtime.YAML.Node parent;
				public GLib.List<Vala.Runtime.YAML.Node> sequence;
				public string tag;
				public Vala.Runtime.YAML.NodeType type;
				public string value;
				public Node ();
				public string to_string ();
				public string to_string_r ();
			}
			[CCode (ref_function = "vala_runtime_yaml_parser_ref", unref_function = "vala_runtime_yaml_parser_unref", param_spec_function = "vala_runtime_yaml_param_spec_parser", cheader_filename = "valartl.h")]
			public class Parser {
				public Vala.Runtime.YAML.NodeEndFunc node_end;
				public Vala.Runtime.YAML.NodeStartFunc node_start;
				public Parser (Vala.Runtime.YAML.NodeStartFunc? node_start = null, Vala.Runtime.YAML.NodeEndFunc? node_end = null);
			}
			[CCode (cprefix = "VALA_RUNTIME_YAML_NODE_TYPE_", cheader_filename = "valartl.h")]
			public enum NodeType {
				SCALAR,
				MAP,
				SEQ
			}
			[CCode (cheader_filename = "valartl.h")]
			public delegate bool NodeEndFunc (Vala.Runtime.YAML.Context pc, Vala.Runtime.YAML.Node node);
			[CCode (cheader_filename = "valartl.h")]
			public delegate bool NodeStartFunc (Vala.Runtime.YAML.Context pc, Vala.Runtime.YAML.Node node);
		}
		[CCode (cheader_filename = "valartl.h")]
		public class Builder : GLib.Object {
			[CCode (cheader_filename = "valartl.h", has_target = false)]
			public delegate GLib.Type TypeFunc ();
			public uint add_from_file (string filename) throws GLib.Error;
			public uint add_from_string (string buffer, size_t length) throws GLib.Error;
			public Vala.Runtime.Buildable? get_object (string name);
			public GLib.List<weak Vala.Runtime.Buildable> get_objects ();
			public Builder (string? prefix = null);
			public bool resolve_method (string name, string method, out void* func);
			public static bool resolve_method_internal (string? prefix, string name, string method, out void* func);
			public bool value_from_string (GLib.ParamSpec pspec, string str, ref GLib.Value value) throws Vala.Runtime.BuilderError;
			public string prefix { get; set; }
		}
		[CCode (cheader_filename = "valartl.h")]
		public interface Buildable : GLib.Object {
			public virtual void add_child (Vala.Runtime.Builder builder, GLib.Object child, string? type);
			public virtual unowned string get_name ();
			public virtual void set_name (string name);
		}
		[CCode (cprefix = "VALA_RUNTIME_BUILDER_ERROR_", cheader_filename = "valartl.h")]
		public errordomain BuilderError {
			PROPERTY_NOT_FOUND,
			TYPE_NOT_FOUND,
			INVALID_VALUE,
			SYMBOL_NOT_FOUND,
		}
	}
}
