/* libyaml-glib-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "G", lower_case_cprefix = "g_")]
namespace GLib {
	[CCode (cprefix = "GYAML", lower_case_cprefix = "g_yaml_")]
	namespace YAML {
		[CCode (cheader_filename = "libyaml-glib-1.0.h")]
		public class Builder : GLib.Object {
			public void add_from_file (GLib.FileStream file) throws GLib.Error;
			public void add_from_string (string str) throws GLib.Error;
			public GLib.Object build_object (GLib.YAML.Node node, GLib.Type type) throws GLib.Error;
			public GLib.Object? get_object (string? anchor);
			public unowned GLib.List<GLib.Object>? get_objects ();
			public Builder (string? prefix = null);
		}
		[CCode (ref_function = "g_yaml_document_ref", unref_function = "g_yaml_document_unref", param_spec_function = "g_yaml_param_spec_document", cheader_filename = "libyaml-glib-1.0.h")]
		public class Document {
			public GLib.HashTable<string,GLib.YAML.Node> anchors;
			public global::YAML.Mark end_mark;
			public GLib.List<GLib.YAML.Node> nodes;
			public GLib.YAML.Node root;
			public global::YAML.Mark start_mark;
			public Document.from_file (GLib.FileStream file) throws GLib.YAML.Error;
			public Document.from_parser (ref global::YAML.Parser parser) throws GLib.YAML.Error;
			public Document.from_string (string str) throws GLib.YAML.Error;
			public Document ();
		}
		[CCode (ref_function = "g_yaml_node_ref", unref_function = "g_yaml_node_unref", param_spec_function = "g_yaml_param_spec_node", cheader_filename = "libyaml-glib-1.0.h")]
		public class Node {
			[CCode (cheader_filename = "libyaml-glib-1.0.h")]
			public class Alias : GLib.YAML.Node {
				public GLib.YAML.Node node;
				public Alias ();
			}
			[CCode (cheader_filename = "libyaml-glib-1.0.h")]
			public class Mapping : GLib.YAML.Node {
				public GLib.List<GLib.YAML.Node> keys;
				public GLib.HashTable<GLib.YAML.Node,GLib.YAML.Node> pairs;
				public global::YAML.MappingStyle style;
				public Mapping ();
			}
			[CCode (cheader_filename = "libyaml-glib-1.0.h")]
			public class Scalar : GLib.YAML.Node {
				public global::YAML.ScalarStyle style;
				public string value;
				public Scalar ();
			}
			[CCode (cheader_filename = "libyaml-glib-1.0.h")]
			public class Sequence : GLib.YAML.Node {
				public GLib.List<GLib.YAML.Node> items;
				public global::YAML.SequenceStyle style;
				public Sequence ();
			}
			public string anchor;
			public global::YAML.Mark end_mark;
			public global::YAML.Mark start_mark;
			public string tag;
			public global::YAML.NodeType type;
			public void* get_pointer ();
			public GLib.YAML.Node get_resolved ();
			public Node ();
			public void set_pointer (void* pointer, GLib.DestroyNotify? notify = null);
		}
		[CCode (cheader_filename = "libyaml-glib-1.0.h")]
		public interface Buildable : GLib.Object {
			public virtual void add_child (GLib.YAML.Builder builder, GLib.Object child, string? type) throws GLib.Error;
			public virtual void custom_node (GLib.YAML.Builder builder, string tag, GLib.YAML.Node node) throws GLib.Error;
			public virtual GLib.Type get_child_type (GLib.YAML.Builder builder, string tag);
			public virtual GLib.Object? get_internal_child (GLib.YAML.Builder builder, string child_name);
			public virtual unowned string get_name ();
			public virtual void set_name (string? name);
		}
		[CCode (cprefix = "G_YAML_ERROR_", cheader_filename = "libyaml-glib-1.0.h")]
		public errordomain Error {
			SYMBOL_NOT_FOUND,
			TYPE_NOT_FOUND,
			NOT_A_BUILDABLE,
			PROPERTY_NOT_FOUND,
			OBJECT_NOT_FOUND,
			UNKNOWN_PROPERTY_TYPE,
			CUSTOM_NODE_ERROR,
			UNEXPECTED_NODE,
			NOT_IMPLEMENTED,
			FILE_NOT_FOUND,
			PARSER_ERROR,
			UNRESOLVED_ALIAS,
		}
	}
}
